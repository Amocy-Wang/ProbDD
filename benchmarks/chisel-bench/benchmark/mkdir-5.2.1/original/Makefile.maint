# -*-Makefile-*-
# This Makefile fragment is shared between the coreutils,
# CPPI, Bison, and Autoconf.

## Copyright (C) 2001-2004 Free Software Foundation, Inc.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.

# This is reported not to work with make-3.79.1
# ME := $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
ME := Makefile.maint

# Do not save the original name or timestamp in the .tar.gz file.
GZIP_ENV = '--no-name --best'

CVS = cvs

ifeq ($(origin prev_version_file), undefined)
  prev_version_file = .prev-version
endif

PREV_VERSION := $(shell cat $(prev_version_file))

tag-package = $(shell echo "$(PACKAGE)" | tr '[:lower:]' '[:upper:]')
tag-this-version = $(subst .,_,$(VERSION))
this-cvs-tag = $(tag-package)-$(tag-this-version)
my_distdir = $(PACKAGE)-$(VERSION)

# Old releases are stored here.
# Used for diffs and xdeltas.
release_archive_dir ?= ../release

# Prevent programs like 'sort' from considering distinct strings to be equal.
# Doing it here saves us from having to set LC_ALL elsewhere in this file.
export LC_ALL = C



## --------------- ##
## Sanity checks.  ##
## --------------- ##

# Checks that don't require cvs.
# Run `changelog-check' last, as previous test may reveal problems requiring
# new ChangeLog entries.
local-checks-available = \
  po-check copyright-check writable-files m4-check author_mark_check \
  changelog-check strftime-check syntax-check makefile_path_separator_check \
  makefile-check
.PHONY: $(local-checks-available)

local-check = $(filter-out $(local-checks-to-skip), $(local-checks-available))

# Make sure C source files in src/ don't include xalloc.h directly,
# since they all already include it via sys2.h.
# It's not a big deal -- just aesthetics.
.PHONY: $(syntax-check-rules)
syntax-check-rules = \
  sc_cast_of_argument_to_free \
  sc_cast_of_x_alloc_return_value \
  sc_cast_of_alloca_return_value \
  sc_changelog \
  sc_error_exit_success \
  sc_space_tab \
  sc_sun_os_names \
  sc_system_h_headers \
  sc_unmarked_diagnostics

syntax-check: $(syntax-check-rules)
#	@grep -E '#  *include <(limits|std(def|arg|bool))\.h>'		\
#	    $$(find -type f -name '*.[chly]') &&			\
#	  { echo '$(ME): found conditional include' 1>&2;		\
#	    exit 1; } || :

#	grep -E '^#  *include <(string|stdlib)\.h>'			\
#	    $(srcdir)/{lib,src}/*.[chy] &&				\
#	  { echo '$(ME): FIXME' 1>&2;					\
#	    exit 1; } || :
# FIXME: don't allow `#include .strings\.h' anywhere

# Look for diagnostics that aren't marked for translation.
# This won't find any for which error's format string is on a separate line.
sc_unmarked_diagnostics:
	@grep --exclude=$(srcdir)/src/shred.c -E			\
	    '\<error \([^"]*"[^"]*[a-z]{3}' $(srcdir)/{lib,src}/*.c	\
	  | grep -v '_(' &&						\
	  { echo '$(ME): found unmarked diagnostic(s)' 1>&2;		\
	    exit 1; } || :

sc_cast_of_argument_to_free:
	@grep -E '\<free \(\(' $(srcdir)/{lib,src}/*.[chly] &&		\
	  { echo '$(ME): don'\''t cast free argument' 1>&2;		\
	    exit 1; } || :

sc_cast_of_x_alloc_return_value:
	@grep -E --exclude=$(srcdir)/lib/regex.c			\
	    '\*\) *x(m|c|re)alloc\>'				\
	    $(srcdir)/{lib,src}/*.[chy] &&				\
	  { echo '$(ME): don'\''t cast x*alloc return value' 1>&2;	\
	    exit 1; } || :

sc_cast_of_alloca_return_value:
	@grep -E '\*\) *alloca\>'					\
	    $(srcdir)/src/*.[chy] &&					\
	  { echo '$(ME): don'\''t cast alloca return value' 1>&2;	\
	    exit 1; } || :

sc_space_tab:
	@( cvsu --list ) > /dev/null 2>&1 || : &&			\
	  grep '[ ]	'						\
	     $$(cvsu --list | grep -vEf .x-$@ ) &&			\
	  { echo '$(ME): found SPACE-TAB sequence; remove the SPACE'	\
		1>&2; exit 1; } || :

# Using EXIT_SUCCESS as the first argument to error is misleading,
# since when that parameter is 0, error does not exit.  Use `0' instead.
sc_error_exit_success:
	@grep -F 'error (EXIT_SUCCESS,'					\
	    $$(find -type f -name '*.[chly]') &&			\
	  { echo '$(ME): found error (EXIT_SUCCESS' 1>&2;		\
	    exit 1; } || :

# FIXME: warn about definitions of EXIT_FAILURE, EXIT_SUCCESS, STREQ

# Each nonempty line must start with a year number, or a TAB.
sc_changelog:
	@grep '^[^12	]' $$(find . -name ChangeLog -maxdepth 2) &&	\
	  { echo '$(ME): found unexpected prefix in a ChangeLog' 1>&2;	\
	    exit 1; } || :

header_regexp = \
  alloca\
  |closeout\
  |ctype\
  |dirent\
  |errno\
  |exitfail\
  |fcntl\
  |inttypes\
  |limits\
  |locale\
  |pathmax\
  |std(lib|bool)\
  |string\
  |sys/(stat|dir|time)\
  |time\
  |unistd\
  |utime\
  |version-etc\
  |xalloc
h_re := $(shell echo '$(header_regexp)'|tr -d ' ')

# Files in src/ should not include directly any of
# the headers already included via system.h.
# Get list of candidates with this:
# grep -h include src/sys*.h|sed 's/.*include //'|sort -
sc_system_h_headers:
	@if test -f $(srcdir)/src/sys2.h; then				\
	  ( cvsu --list ) > /dev/null 2>&1 || : &&			\
	  grep -E '^# *include ["<]($(h_re))\.h[">]'			\
	      $$(cvsu --list src | grep -Ev 'sys(2|tem)\.h$$')		\
	    && { echo '$(ME): the above are already included via system.h'\
		  1>&2; exit 1; } || :; \
	fi

sc_sun_os_names:
	@( cvsu --list ) > /dev/null 2>&1 || : && \
	grep -Ei \
	    'solaris[^[:alnum:]]*2\.(7|8|9|[1-9][0-9])|sunos[^[:alnum:]][6-9]' \
	  $$(cvsu --list | grep -vEf .x-$@ ) &&			\
	  { echo '$(ME): found misuse of Sun OS version numbers' 1>&2;	\
	    exit 1; } || :

# Ensure that date's --help output stays in sync with the info
# documentation for GNU strftime.  The only exception is %N,
# which date accepts but GNU strftime does not.
extract_char = sed 's/^[^%][^%]*%\(.\).*/\1/'
strftime-check:
	if test -f $(srcdir)/src/date.c; then				\
	  grep '^  %.  ' $(srcdir)/src/date.c | sort			\
	    | $(extract_char) > $@-src;					\
	  { echo N;							\
	    info libc date calendar format | grep '^    `%.'\'		\
	      | $(extract_char); } | sort > $@-info;			\
	  diff -u $@-src $@-info || exit 1;				\
	  rm -f $@-src $@-info;						\
	fi

# Ensure that we use only the standard $(VAR) notation,
# not @...@ in Makefile.am, now that we can rely on automake
# to emit a definition for each substituted variable.
makefile-check:
	grep -E '@[A-Z_0-9]+@' `find . -name Makefile.am` \
	  && { echo 'Makefile.maint: use $(...), not @...@' 1>&2; exit 1; } || :

news-date-check: NEWS
	today=`date +%Y-%m-%d`;	\
	if head NEWS | grep '^\*.*'$$today >/dev/null; then \
	  :; \
	else \
	  echo "today's date is not in NEWS" 1>&2; \
	  exit 1; \
	fi

changelog-check:
	if head ChangeLog | grep 'Version $(VERSION)' >/dev/null; then \
	  :; \
	else \
	  echo "$(VERSION) not in ChangeLog" 1>&2; \
	  exit 1; \
	fi

m4-check:
	@grep 'AC_DEFUN([^[]' m4/*.m4 \
	  && { echo 'Makefile.maint: quote the first arg to AC_DEFUN' 1>&2; \
	       exit 1; } || :

# Verify that all source files using _() are listed in po/POTFILES.in.
# FIXME: don't hard-code src/false.c below; use a more general mechanism.
po-check:
	( cvsu --list ) > /dev/null 2>&1 || : &&			\
	if test -f po/POTFILES.in; then					\
	  grep -E -v '^(#|$$)' po/POTFILES.in				\
	    | grep -v '^src/false\.c$$' | sort > $@-1;			\
	  files=;							\
	  for file in $$(cvsu --list lib src | grep '\.[chly]$$'); do	\
	    case $$file in						\
	    *.[ch])							\
	      base=`expr " $$file" : ' \(.*\)\..'`;			\
	      { test -f $$base.l || test -f $$base.y; } && continue;;	\
	    esac;							\
	    files="$$files $$file";					\
	  done;								\
	  grep -E -l '\bN?_\([^)"]*("|$$)' $$files | sort > $@-2;	\
	  diff -u $@-1 $@-2 || exit 1;					\
	  rm -f $@-1 $@-2;						\
	fi

# In a definition of #define AUTHORS "... and ..." where the RHS contains
# the English word `and', the string must be marked with `N_ (...)' so that
# gettext recognizes it as a string requiring translation.
author_mark_check:
	@grep '^# *define AUTHORS "[^"]* and ' src/*.c |grep -v ' N_ (' && \
	  { echo 'Makefile.maint: enclose the above strings in N_ (...)' 1>&2; \
	    exit 1; } || :

# Sometimes it is useful to change the PATH environment variable
# in Makefiles.  When doing so, it's better not to use the Unix-centric
# path separator of `:', but rather the automake-provided `@PATH_SEPARATOR@'.
# It'd be better to use `find -print0 ...|xargs -0 ...', but less portable,
# and there probably aren't many projects with so many Makefile.am files
# that we'd have to worry about limits on command line length.
msg = 'Makefile.maint: Do not use `:'\'' above; use @PATH_SEPARATOR@ instead'
makefile_path_separator_check:
	@grep 'PATH=.*:' `find $(srcdir) -name Makefile.am` \
	  && { echo $(msg) 1>&2; exit 1; } || :

# Check that `make alpha' will not fail at the end of the process.
writable-files:
	if test -d $(release_archive_dir); then :; else			\
	  mkdir $(release_archive_dir);					\
	fi
	for file in $(distdir).tar.gz $(xd-delta)			\
	            $(release_archive_dir)/$(distdir).tar.gz		\
	            $(release_archive_dir)/$(xd-delta); do		\
	  test -e $$file || continue;					\
	  test -w $$file						\
	    || { echo ERROR: $$file is not writable; fail=1; };		\
	done;								\
	test "$$fail" && exit 1 || :

v_etc_file = lib/version-etc.c
# Make sure that the copyright date in $(v_etc_file) is up to date.
copyright-check:
	@if test -f $(v_etc_file); then \
	  grep '"Copyright (C) $(shell date +%Y) Free' $(v_etc_file) \
	    >/dev/null \
	  || { echo 'out of date copyright in $(v_etc_file); update it' 1>&2; \
	       exit 1; }; \
	fi


# Sanity checks with the CVS repository.
cvs-tag-check:
	echo $(this-cvs-tag); \
	if $(CVS) -n log -h README | grep -e $(this-cvs-tag): >/dev/null; then \
	  echo "$(this-cvs-tag) as already been used; not tagging" 1>&2; \
	  exit 1; \
	else :; fi

cvs-diff-check:
	if $(CVS) diff >cvs-diffs; then				\
	  rm cvs-diffs;						\
	else							\
	  echo "Some files are locally modified:" 1>&2;		\
	  cat cvs-diffs;					\
	  exit 1;						\
	fi

cvs-check: cvs-diff-check cvs-tag-check

maintainer-distcheck: changelog-check
	$(MAKE) distcheck
	$(MAKE) my-distcheck


# Tag before making distribution.  Also, don't make a distribution if
# checks fail.  Also, make sure the NEWS file is up-to-date.
# FIXME: use dist-hook/my-dist like distcheck-hook/my-distcheck.
cvs-dist: $(local-check) cvs-check maintainer-distcheck
	$(CVS) update po
	$(CVS) tag -c $(this-cvs-tag)
	$(MAKE) dist

# Use this to make sure we don't run these programs when building
# from a virgin tgz file, below.
null_AM_MAKEFLAGS = \
  ACLOCAL=false \
  AUTOCONF=false \
  AUTOMAKE=false \
  AUTOHEADER=false \
  MAKEINFO=false

# Detect format-string/arg-list mismatches that would normally be obscured
# by the use of _().  The --disable-nls effectively defines away that macro,
# and building with CFLAGS='-Wformat -Werror' causes any format warning to be
# treated as a failure.
TMPDIR ?= /tmp
t=$(TMPDIR)/$(PACKAGE)/test
my-distcheck: $(local-check)
	-rm -rf $(t)
	mkdir -p $(t)
	GZIP=$(GZIP_ENV) $(AMTAR) -C $(t) -zxf $(distdir).tar.gz
	cd $(t)/$(distdir) \
	  && ./configure --disable-nls \
	  && $(MAKE) CFLAGS='-Wformat -Werror' \
	      AM_MAKEFLAGS='$(null_AM_MAKEFLAGS)' \
	  && $(MAKE) dvi \
	  && $(MAKE) check \
	  && $(MAKE) distclean
	(cd $(t) && mv $(distdir) $(distdir).old \
	  && $(AMTAR) -zxf - ) < $(distdir).tar.gz
	diff -ur $(t)/$(distdir).old $(t)/$(distdir)
	-rm -rf $(t)
	@echo "========================"; \
	echo "$(distdir).tar.gz is ready for distribution"; \
	echo "========================"

WGET = wget
WGETFLAGS = -C off

tgz-md5 = $(shell md5sum < $(my_distdir).tar.gz|sed 's/  -//')
tgz-sha1 = $(shell sha1sum < $(my_distdir).tar.gz|sed 's/  -//')
bz2-md5 = $(shell md5sum < $(my_distdir).tar.bz2|sed 's/  -//')
bz2-sha1 = $(shell sha1sum < $(my_distdir).tar.bz2|sed 's/  -//')
xdelta-md5 = $(shell md5sum < $(xd-delta)|sed 's/  -//')
xdelta-sha1 = $(shell sha1sum < $(xd-delta)|sed 's/  -//')
tgz-size = $(shell du --human $(my_distdir).tar.gz|sed 's/\([MkK]\).*/ \1B/')
bz2-size = $(shell du --human $(my_distdir).tar.bz2|sed 's/\([MkK]\).*/ \1B/')
xd-size = $(shell du --human $(xd-delta)|sed 's/\([MkK]\).*/ \1B/')

rel-check:
	tarz=/tmp/rel-check-tarz-$$$$; \
	md5_tmp=/tmp/rel-check-md5-$$$$; \
	set -e; \
	trap 'status=$$?; rm -f $$tarz $$md5_tmp; exit $$status' 0 1 2 3 15; \
	$(WGET) $(WGETFLAGS) -q --output-document=$$tarz $(url); \
	echo "$(md5)  -" > $$md5_tmp; \
	md5sum -c $$md5_tmp < $$tarz

prev-tgz = $(PACKAGE)-$(PREV_VERSION).tar.gz
xd-delta = $(PACKAGE)-$(PREV_VERSION)-$(VERSION).xdelta

rel-files = $(xd-delta) $(DIST_ARCHIVES)
announcement: NEWS ChangeLog $(rel-files)
	@./announce-gen							\
	    --release-type=$(RELEASE_TYPE)				\
	    --package=$(PACKAGE)					\
	    --prev=$(PREV_VERSION)					\
	    --curr=$(VERSION)						\
	    --release-archive-directory=$(release_archive_dir)		\
	    --news=NEWS							\
	    $(addprefix --url-dir=, $(url_dir_list))			\


## ---------------- ##
## Updating files.  ##
## ---------------- ##

ftp-gnu = ftp://ftp.gnu.org/gnu
www-gnu = http://www.gnu.org

# Use mv, if you don't have/want move-if-change.
move_if_change ?= move-if-change


# --------------------- #
# Updating everything.  #
# --------------------- #

.PHONY: update
local_updates ?= wget-update cvs-update po-update
update: $(local_updates)


# ------------------- #
# Updating PO files.  #
# ------------------- #

po_repo = http://www.iro.umontreal.ca/contrib/po/maint/$(PACKAGE)
.PHONY: do-po-update po-update
do-po-update:
	tmppo=/tmp/$(PACKAGE)-$(VERSION)-po &&\
	rm -rf $$tmppo && \
	mkdir $$tmppo && \
	(cd $$tmppo && \
	  $(WGET) $(WGETFLAGS) -r -l1 -nd --no-parent -A '*.po' $(po_repo)) &&\
	cp $$tmppo/*.po po
	cd po && $(MAKE) update-po
	$(MAKE) po-check

po-update:
	if test -d "po"; then \
	  $(MAKE) do-po-update; \
	fi

# -------------------------- #
# Updating GNU build tools.  #
# -------------------------- #

# The following pseudo table associates a local directory and a URL
# with each of the files that belongs to some other package and is
# regularly updated from the specified URL.
wget_files ?= \
  $(srcdir)/config/config.guess \
  $(srcdir)/config/config.sub \
  $(srcdir)/config/texinfo.tex \
  $(srcdir)/src/ansi2knr.c

get-targets = $(patsubst %, get-%, $(wget_files))

config.guess-url_prefix = $(ftp-gnu)/config/
config.sub-url_prefix = $(ftp-gnu)/config/

ansi2knr.c-url_prefix = ftp://ftp.cs.wisc.edu/ghost/

texinfo.tex-url_prefix = $(ftp-gnu)/texinfo/

standards.texi-url_prefix = $(www-gnu)/prep/
make-stds.texi-url_prefix = $(standards.texi-url_prefix)

target = $(patsubst get-%, %, $@)
url = $($(notdir $(target))-url_prefix)$(notdir $(target))

.PHONY: $(get-targets)
$(get-targets):
	$(WGET) $(WGETFLAGS) $(url) -O $(target).t \
	  && $(move_if_change) $(target).t $(target)

cvs_files ?= \
  $(srcdir)/config/depcomp \
  $(srcdir)/config/install-sh \
  $(srcdir)/config/missing \
  $(srcdir)/config/mkinstalldirs \
  $(srcdir)/src/ansi2knr.c
automake_repo=:pserver:anoncvs:anoncvs@sources.redhat.com:/cvs/automake
.PHONY: wget-update
wget-update: $(get-targets)

.PHONY: cvs-update
cvs-update:
	fail=;								\
	for f in $(cvs_files); do					\
	  test -f $$f || { echo "*** skipping $$f" 1>&2; continue; };	\
	  cvs diff $$f > /dev/null					\
	    || { echo "*** $$f is locally modified; skipping it" 1>&2;	\
		 fail=yes; continue; };					\
	  file=$$(basename $$f);					\
	  echo checking out $$file...;					\
	  $(CVS) -d $(automake_repo) co -p automake/lib/$$file> $$f.t	\
	    && $(move_if_change) $$f.t $$f;				\
	done;								\
	test "$$fail" && exit 1

emit_upload_commands:
	@echo =====================================
	@echo =====================================
	@echo "$(srcdir)/gnupload $(GNUPLOADFLAGS) \\"
	@echo "    --to fetish.sf.net:fetish-ftp \\"
	@echo "    --to $(gnu_rel_host):coreutils \\"
	@echo "  $(rel-files)"
	@echo '# send the /tmp/announcement e-mail'
	@echo =====================================
	@echo =====================================

$(xd-delta): $(release_archive_dir)/$(prev-tgz) $(distdir).tar.gz
	xdelta delta -9 $^ $@ || :

.PHONY: alpha beta major
alpha beta major: news-date-check $(local-check)
	$(MAKE) cvs-dist
	$(MAKE) $(xd-delta)
	$(MAKE) -s announcement RELEASE_TYPE=$@ > /tmp/announce-$(my_distdir)
	ln $(rel-files) $(release_archive_dir)
	chmod a-w $(rel-files)
	echo $(VERSION) > $(prev_version_file)
	$(CVS) ci -m. $(prev_version_file)
	$(MAKE) -s emit_upload_commands RELEASE_TYPE=$@
